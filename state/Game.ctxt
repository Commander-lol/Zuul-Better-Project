#BlueJ class context
comment0.params=
comment0.target=Game()
comment0.text=\n\ Create\ the\ game\ and\ initialise\ its\ internal\ map.\n
comment1.params=
comment1.target=void\ createRooms()
comment1.text=\n\ Create\ all\ the\ rooms\ and\ link\ their\ exits\ together.\n
comment2.params=
comment2.target=void\ play()
comment2.text=\n\ \ \ \ \ \ \ \ Room\ outside,\ theater,\ pub,\ lab,\ office;\n\n\ \ \ \ \ \ \ \ //\ create\ the\ rooms\n\ \ \ \ \ \ \ \ outside\ \=\ new\ Room("outside\ the\ main\ entrance\ of\ the\ university",\ this);\n\ \ \ \ \ \ \ \ theater\ \=\ new\ Room("in\ a\ lecture\ theater",\ this);\n\ \ \ \ \ \ \ \ pub\ \=\ new\ Room("in\ the\ campus\ pub",\ this);\n\ \ \ \ \ \ \ \ lab\ \=\ new\ Room("in\ a\ computing\ lab",\ this);\n\ \ \ \ \ \ \ \ office\ \=\ new\ Room("in\ the\ computing\ admin\ office",\ this);\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ rooms.put("outside",\ outside);\n\ \ \ \ \ \ \ \ rooms.put("theater",\ theater);\n\ \ \ \ \ \ \ \ rooms.put("pub",\ pub);\n\ \ \ \ \ \ \ \ rooms.put("lab",\ lab);\n\ \ \ \ \ \ \ \ rooms.put("office",\ office);\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ //\ initialise\ room\ exits\n\ \ \ \ \ \ \ \ outside.setExit("east",\ "theater");\n\ \ \ \ \ \ \ \ outside.setExit("south",\ "lab");\n\ \ \ \ \ \ \ \ outside.setExit("west",\ "pub");\n\n\ \ \ \ \ \ \ \ theater.setExit("west",\ "outside");\n\n\ \ \ \ \ \ \ \ pub.setExit("east",\ "outside");\n\n\ \ \ \ \ \ \ \ lab.setExit("north",\ "outside");\n\ \ \ \ \ \ \ \ lab.setExit("east",\ "office");\n\n\ \ \ \ \ \ \ \ office.setExit("west",\ "lab");\n\n\ \ \ \ \ \ \ \ currentRoom\ \=\ "outside";\ //\ start\ game\ outside\n\n\ \ \ \ /**\n\ Main\ play\ routine.\ Loops\ until\ end\ of\ play.\n
comment3.params=
comment3.target=void\ printWelcome()
comment3.text=\n\ Print\ out\ the\ opening\ message\ for\ the\ player.\n
comment4.params=command
comment4.target=boolean\ processCommand(command.Command)
comment4.text=\n\ Given\ a\ command,\ process\ (that\ is\:\ execute)\ the\ command.\n\ \n\ @param\ command\n\ \ \ \ \ \ \ \ \ \ \ \ The\ command\ to\ be\ processed.\n\ @return\ true\ If\ the\ command\ ends\ the\ game,\ false\ otherwise.\n
comment5.params=
comment5.target=void\ printHelp()
comment5.text=\n\ Print\ out\ some\ help\ information.\ Here\ we\ print\ some\ stupid,\ cryptic\n\ message\ and\ a\ list\ of\ the\ command\ words.\n
comment6.params=command
comment6.target=void\ parseRoom(command.Command)
comment6.text=\n\ Try\ to\ move\ in\ one\ direction.\ Parses\ the\ command\ to\ look\ for\ various\ factors\n\ including\ existence\ of\ a\ direction,\ and\ the\ presence\ of\ an\ exit\ in\ that\ direction.\n\ If\ it\ is\ possible\ to\ move\ in\ that\ direction,\ it\ will\ invoke\ goRoom\ to\ do\ so\n
comment7.params=nextRoom
comment7.target=void\ goRoom(java.lang.String)
comment7.text=\n\ Store\ the\ current\ room\ in\ the\ list\ of\ previous\ rooms\ and\ set\ the\ current\ room\ to\ \n\ the\ given\ String\ before\ printing\ out\ the\ description\ of\ the\ new\ room\ and\ \n
comment8.params=command
comment8.target=boolean\ quit(command.Command)
comment8.text=\n\ "Quit"\ was\ entered.\ Check\ the\ rest\ of\ the\ command\ to\ see\ whether\ we\n\ really\ quit\ the\ game.\n\ \n\ @return\ true,\ if\ this\ command\ quits\ the\ game,\ false\ otherwise.\n
comment9.params=dir
comment9.target=java.util.HashSet\ getKvFiles(java.lang.String)
comment9.text=\n\ Recursively\ searches\ the\ given\ directory\ for\ any\ files\ ending\ with\ '.kv'\n\ and\ adds\ their\ paths\ to\ a\ set\n\ \n\ @param\ dir\n\ \ \ \ \ \ \ \ \ \ \ \ The\ directory\ path\ of\ the\ directory\ to\ search\n\ @return\ A\ HashSet\ object\ containing\ the\ paths\ of\ all\ the\ .kv\ files\ that\n\ \ \ \ \ \ \ \ \ were\ found\ in\ the\ given\ directory\n
numComments=10
